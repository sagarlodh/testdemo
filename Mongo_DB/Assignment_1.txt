cmd ~ mongod	// to connect to mongodb server
cmd ~ mongo	// to get mongo shell running

Q.] To use a database named 'mongo_practice'
Ans: 	>> use mongo_practice

Q.] Insert the following documents into a movies collection.
Ans:	>> db.createCollection('movies')
>> db.movies.insertMany( 
[  
	{
		"title" : "Fight Club",
		"writer" : "Chuck Palahniuko",
		"year" : "1999",
		"actors" : ["Brad Pitt","Edward Norton"]
	},
	{
		"title" : "Pulp Fiction",
		"writer" : "Quentin Tarantino",
		"year" : "1994",
		"actors" : ["John Travolta","Uma Thurman"]
	},
	{
		"title" : "Inglorious Basterds",
		"writer" : "Quentin Tarantino",
		"year" : "2009",
		"actors" : ["Brad Pitt","Diane Kruger","Eli Roth"]
	},
	{
		"title" : "The Hobbit: An Unexpected Journey",
		"writer" : "J.R.R. Tolkein",
		"year" : "2012",
		"franchise" : "The Hobbit"
	},
	{
		"title" : "The Hobbit: The Desolation of Smaug",
		"writer" : "J.R.R. Tolkein",
		"year" : "2013",
		"franchise" : "The Hobbit"
	},
	{
		"title" : "The Hobbit: The Battle of the Five Armies",
		"writer" : "J.R.R. Tolkein",
		"year" : "2012",
		"franchise" : "The Hobbit",
		"synopsis" : "Bilbo and Company are forced to engage in a war against an array of
			  combatants and keep the Lonely Mountain from falling into the hands of a rising
			  darkness."
	},
	{
		"title" : "Pee Wee Herman's Big Adventure"
	},
	{
		"title" : "Avatar"
	}
] )

``````````````````````````````````````````````````

Q.] query the movies collection to
1. get all documents
ans :	>> db.movies.find().pretty()	

2. get all documents with writer set to "Quentin Tarantino"
ans :	>> db.movies.find({"writer": "Quentin Tarantino"}).pretty()

3. get all documents where actors include "Brad Pitt"
ans :	>> db.movies.find({"actors":"Brad Pitt"}}).pretty()

4. get all documents with franchise set to "The Hobbit"
ans :	>> db.movies.find({"franchise":"The Hobbit"}).pretty()

5. get all movies released in the 90s
ans :	>> db.movies.find({$and:[{ "year": {$gte:1900}}, {"year": { $lte:1900}}]}).pretty()

6. get all movies released before the year 2000 or after 2010
ans :	>> db.movies.find({$or:[{ "year": {$lt:2000}}, {"year": { $gt:2010}}]}).pretty()

``````````````````````````````````````````````````

Q.] Update Documents
1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit,
Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of
dwarves to reclaim their mountain home - and the gold within it - from the
dragon Smaug."
Ans :	>> db.movies.findOneAndUpdate({"title":"The Hobbit: An Unexpected Journey"},{$set: { "synopsis": "A reluctant hobbit,
	Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of
	dwarves to reclaim their mountain home - and the gold within it - from the
	dragon Smaug."}})

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves,
along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim
Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a
mysterious and magical ring."
Ans :	>> db.movies.findOneAndUpdate({"title":"The Hobbit: The Desolation of Smaug"},{$set: { "synopsis": "The dwarves,
	along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim
	Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a
	mysterious and magical ring."}})

3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
Ans :	>> db.movies.update({"title" : "Pulp Fiction"},{$push : {"actors":"Samuel L. Jackson"}})

``````````````````````````````````````````````````

Q.] Text Search
1. find all movies that have a synopsis that contains the word "Bilbo"
Ans :	>> db.movies.createIndex({synopsis:"text")}
	>> db.movies.find({$text:{$search:"Bilbo"}}).pretty()

2. find all movies that have a synopsis that contains the word "Gandalf"
Ans :	>> db.movies.find({$text:{$search:"Bilbo"}}).pretty()

3. find all movies that have a synopsis that contains the word "Bilbo" and not the
word "Gandalf"
Ans :	>> db.movies.find({$text:{$search:"Bilbo -Gandalf"}}).pretty()

4. find all movies that have a synopsis that contains the word "dwarves" or
"hobbit"
Ans :	>> db.movies.find({$text:{$search:"dwarves hobbit"}}).pretty() 

5. find all movies that have a synopsis that contains the word "gold" and
"dragon"
Ans :	>> db.movies.find({$text:{$search:{$and:["gold","dragon"]}}).pretty()

``````````````````````````````````````````````````

Q.] Delete Documents
1. delete the movie "Pee Wee Herman's Big Adventure"
Ans :	>> db.movies.remove({"title":"Pee Wee Herman's Big Adventure"})

2. delete the movie "Avatar"
Ans :	>> db.movies.remove({"title":"Avatar"})

``````````````````````````````````````````````````

Q.] Insert the following documents into a users collection
Ans :	>> db.createCollection('users')
>> db.users.insertMany( 
[  
	{
		"username" : "GoodGuyGreg",
		"first_name": "Good Guy",
		"last_name": "Greg"
	},
	{
		"username" : "ScumbagSteve",
		"full_name" : [{"first : "Scumbag"},{"last : "Steve"}]
	}
])

``````````````````````````````````````````````````

Q.] Insert the following documents into a posts collection
Ans :	>> db.createCollection('posts')
>> db.movies.insertMany( 
[  
	{
		"username" : "GoodGuyGreg"
		"title" : "Passes out at party"
		"body" : "Wakes up early and cleans house"
	},
	{
		"username" : "GoodGuyGreg"
		"title" : "Steals your identity"
		"body" : "Raises your credit score"
	},
	{
		"username" : "GoodGuyGreg"
		"title" : "Reports a bug in your code"
		"body" : "Sends you a Pull Request"
	},
	{
		"username" : "ScumbagSteve"
		"title" : "Borrows something"
		"body" : "Sells it"
	},
	{
		"username" : "ScumbagSteve"
		"title" : "Borrows everything"
		"body" : "The end"
	},
	{
		"username" : "ScumbagSteve"
		"title" : "Forks your repo on github"
		"body" : "Sets to private"
	},

])

``````````````````````````````````````````````````

Q.] Insert the following documents into a comments collection
Ans :	>> db.createCollection('comments')
>> db.movies.insertMany(
[  
	{
		"username" : "GoodGuyGreg"
		"comment" : "Hope you got a good deal!"
		"post" : {"$ref":"posts","$id":{"title":"Borrows something"},"$db":"mongo_practice"}
	},
	{
		"username" : "GoodGuyGreg"
		"comment" : "What's mine is yours!"
		"post" : {"$ref":"posts","$id":{"title":"Borrows everything"},"$db":"mongo_practice"}
	},
	{
		"username" : "GoodGuyGreg"
		"comment" : "Don't violate the licensing agreement!"
		"post" : {"$ref":"posts","$id":{"title":"Forks your repo on github"},"$db":"mongo_practice"}
	},
	{
		"username" : "ScumbagSteve"
		"comment" : "It still isn't clean"
		"post" : {"$ref":"posts","$id":{"title":"Passes out at party"},"$db":"mongo_practice"}
	},
	{
		"username" : "ScumbagSteve"
		"comment" : " Denied your PR cause I found a hack"
		"post" : {"$ref":"posts","$id":{"title":"Reports a bug in your code"},"$db":"mongo_practice"}
	}
])

``````````````````````````````````````````````````

Q.] Querying related collections
1. find all users
Ans:	>> db.users.find().pretty()

2. find all posts
Ans:	>> db.posts.find().pretty()

3. find all posts that was authored by "GoodGuyGreg"
Ans:	>> db.posts.find("username":"GoodGuyGreg").pretty()

4. find all posts that was authored by "ScumbagSteve"
Ans:	>> db.posts.find("username":"ScumbagSteve").pretty()

5. find all comments
Ans:	>> db.comments.find().pretty()

6. find all comments that was authored by "GoodGuyGreg"
Ans:	>> db.comments.find("username":"GoodGuyGreg").pretty()

7. find all comments that was authored by "ScumbagSteve"
Ans:	>> db.comments.find("username":"ScumbagSteve").pretty()

8. find all comments belonging to the post "Reports a bug in your code"
Ans:	>> db.comments.find("post":"Reports a bug in your code")





