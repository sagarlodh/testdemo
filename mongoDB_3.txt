Aggregation frameworks
``````````````````````
most powerful tool that MongoDB offers

we can group docs in collections
we can add additional fields during grouping
we can process docs in several stages one by one
ver fast
````````````````````
db.<collection>.aggregate( [<stage1>,<stage1>,...] )
	- results passes through stages
 SYNTAX for stage :
	{ $<stageOperator> : { <key> : {<value>} }
EX :	
	db.persons.aggregate ([ 
	{$limit: 100},
	{$match: {age:{$gt:20}}},
	{$group: { _id: "$age"}},
	{$sort: { count: -1}}	
	])
more :
	{$count: "<title>"}			- returns count of all docs
	{$project: { <field1>: [1/0], ...... } }	- to show/unshow fields as well structure the docs
	{$limit: <number>}			- return first <num> outputs
	{$skip: <number>}			- skip <num> outputs from first
	{$unwind: <arrayRefExp>}		- to resolve 'group' issue for list of docs
					- result can be passed to ['group'/'project']
					- splitting of arrays can be done by this
ACCUMULATORS OPERATORS (used with group stage):
``````````````````````````````````````````
Syntax:	{$<accumulatorOperator>: <exp>}				-
Eg:
	{$sum: "$quantity"}		- can be used only with group stage to count total docs in each group
	{$avg: "$age"}		- calculates avg value of all values in the group
	{$max: "$money"}		- returns the max of values on the group
	{$out: "<outputCollectionName>"} - to create a new collection and fill it results docs
UNARY OPERATORS (used with each document [used with '$projects']):
``````````````````````````````````````````
Syntax:	{$<accumulatorOperator>: <exp>}				-
Eg:
	{$type: "$quantity"}		-
	{$or: "$age"}		- 
	{$and: "$money"}		- 
	{$[lt/lte]: "$quantity"}		- 
	{$multiply: "$age"}		- 
	{$[gt/gte]: "$money"}	-
Another stage :
`````````````````````````````
{allowDiskUse : true}
`````````````````````````````````````````
To create a backup :
	mongodump
To restore deleted databases (only present in dump folder) :
	mongorestore
to create a specific DB backup :	
	mongodump --db <dbname>
to restore a specific db :
	mongorestore --db <dbname> dump/<dbfolderName>
to backup a document :
	mongodump --db <dbname> --collection <collecName>
tp restore a document :
	mongorestore --db <dbname> --collection <collecName> dump/<dbfolder>/<collection>
`````````````````````````````````````````````````````````````````````````````````````````````````````````
SHARDING :

" scaling horizontally " 
each shard has chunks 100 mb :
if shard grows more, the balancer : 
	- splitting on basis of shard key
	- then migrate to another shard 
shard key once created can't be changed (most common/more cardinality/time_stamp,_id)
config servers






